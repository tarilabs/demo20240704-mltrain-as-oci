---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: omlmd-to-modelcar
spec:
  description: >-
      TBD
  params:
    - name: IMAGE
      description: Reference of the OCI Artifact containing the ML model.
      type: string
      default: quay.io/mmortari/ml-iris:v1
    - name: PUBLIC_KEY
      description: public key.
      type: string
  results:
    - name: OCIARTIFACT_DIGEST
      description: Digest of the oci artifact.
    - name: OCIARTIFACT_REF
      description: Digest of the oci artifact.
  steps:
    - name: compute-digests
      image: "quay.io/mmortari/demo20240704-mltrain-as-oci:latest" # TODO: eventually use some py
      imagePullPolicy: Always
      env:
      - name: IMAGE
        value: $(params.IMAGE)
      script: |
        OCIARTIFACT_DIGEST="$(skopeo inspect --raw "docker://${IMAGE}" | sha256sum | awk '{printf "sha256:"$1}')"
        echo -n "${OCIARTIFACT_DIGEST}" | tee $(results.OCIARTIFACT_DIGEST.path) && echo
        LREF="${IMAGE%[:@]*}"
        echo -n "${LREF}@${OCIARTIFACT_DIGEST}" | tee $(results.OCIARTIFACT_REF.path) && echo
    - name: verify
      image: "quay.io/mmortari/demo20240704-mltrain-as-oci:latest" # this image only used for cosign binary in this case
      imagePullPolicy: Always
      env:
      - name: PUBLIC_KEY
        value: $(params.PUBLIC_KEY)
      script: |
        echo "Using file cosign.pub as public key:" && echo -n "${PUBLIC_KEY}" | tee cosign.pub && echo
        IMAGE=$(cat $(results.OCIARTIFACT_REF.path))
        cosign verify-attestation ${IMAGE} --insecure-ignore-tlog=true --key cosign.pub --type="slsaprovenance"
        echo "verify end."
    - name: download
      image: "quay.io/mmortari/demo20240704-mltrain-as-oci:latest"
      imagePullPolicy: Always
      script: |
        IMAGE=$(cat $(results.OCIARTIFACT_REF.path))
        cd $(workspaces.workspace1.path)
        mkdir data
        cd data
        omlmd pull ${IMAGE}
        echo "download end."
    - name: prepare-containerfile
      image: "quay.io/mmortari/demo20240704-mltrain-as-oci:latest"
      imagePullPolicy: Always
      script: |
        cd $(workspaces.workspace1.path)
        cat <<EOF > Dockerfile
        FROM busybox
        RUN mkdir /models && chmod 775 /models
        COPY data/ /models/
        EOF
        cat Dockerfile && echo
  workspaces:
    - name: workspace1
      description: This is where I will place the Containerfile and data
